<%- include('../../views/layout/admin/header.ejs')%>

<!-- Bootstrap CSS -->
<link
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
  rel="stylesheet"
/>
<!-- Font Awesome -->
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
/>
<!-- Custom CSS -->
<link rel="stylesheet" href="/styles/admin/coupon.css" />

<!-- Add Google Fonts -->
<link
  href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
  rel="stylesheet"
/>

<div class="wrapper">
  <div class="sidebar">
    <h2><i class="fas fa-mobile-alt me-2"></i>Mobify</h2>
    <a href="/admin/dashboard">
      <i class="fas fa-chart-line"></i>
      <span>Dashboard</span>
    </a>
    <a href="/admin/users">
      <i class="fas fa-users"></i>
      <span>Users</span>
    </a>
    <a href="/admin/category">
      <i class="fas fa-list"></i>
      <span>Categories</span>
    </a>
    <a href="/admin/brands">
      <i class="fas fa-tags"></i>
      <span>Brands</span>
    </a>
    <a href="/admin/addProducts">
      <i class="fas fa-plus"></i>
      <span>Add Products</span>
    </a>
    <a href="/admin/products">
      <i class="fas fa-box"></i>
      <span>Products</span>
    </a>
    <a href="/admin/orders">
      <i class="fas fa-shopping-cart"></i>
      <span>Orders</span>
    </a>
    <a href="/admin/coupons" class="active">
      <i class="fas fa-ticket-alt"></i>
      <span>Coupons</span>
    </a>
    <a href="#">
      <i class="fas fa-cog"></i>
      <span>Settings</span>
    </a>
    <a href="/admin/logout">
      <i class="fas fa-sign-out-alt"></i>
      <span>Logout</span>
    </a>
  </div>
  <div class="main-content">
    <div class="container-fluid">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h4 class="mb-0">Coupon Management</h4>
        <div class="date text-muted">
          <%= new Date().toLocaleDateString('en-US', { weekday: 'long', year:
          'numeric', month: 'long', day: 'numeric' }) %>
        </div>
      </div>

      <!-- Breadcrumb -->
      <div class="breadcrumb-container mb-4">
        <nav aria-label="breadcrumb">
          <ol class="breadcrumb mb-0">
            <li class="breadcrumb-item">
              <a href="/admin/dashboard"
                ><i class="fas fa-home me-1"></i>Dashboard</a
              >
            </li>
            <li class="breadcrumb-item active" aria-current="page">
              <i class="fas fa-ticket-alt me-1"></i>Coupons
            </li>
          </ol>
        </nav>
      </div>

      <!-- Coupons Table Card -->
      <div class="card mb-4">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <h5 class="card-title mb-0">All Coupons</h5>
            <button
              type="button"
              class="btn btn-primary"
              data-bs-toggle="modal"
              data-bs-target="#addCouponModal"
            >
              <i class="fas fa-plus me-2"></i>Add New Coupon
            </button>
          </div>
          <div class="table-responsive">
            <table class="table table-striped table-hover">
              <thead class="table-light">
                <tr>
                  <th>Code</th>
                  <th>Offer Amount</th>
                  <th>Min. Purchase</th>
                  <th>Expiry Date</th>
                  <th>Uses Left</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% coupons.forEach(coupon => { %>
                <tr>
                  <td><%= coupon.name %></td>
                  <td>₹<%= coupon.offerPrice %></td>
                  <td>₹<%= coupon.minimumPrice %></td>
                  <td><%= new Date(coupon.expireOn).toLocaleDateString() %></td>
                  <td><%= coupon.maxUses - coupon.usesCount %></td>
                  <td>
                    <span
                      class="badge <%= coupon.isListed ? 'bg-success' : 'bg-danger' %>"
                    >
                      <%= coupon.isListed ? 'Active' : 'Inactive' %>
                    </span>
                  </td>
                  <td>
                    <div class="action-buttons">
                      <% if(coupon.isListed) { %>
                      <button
                        class="btn btn-soft-warning btn-icon toggle-status"
                        data-id="<%= coupon._id %>"
                        data-bs-toggle="tooltip"
                        data-bs-placement="top"
                        title="Deactivate Coupon"
                      >
                        <i class="fas fa-ban"></i>
                      </button>
                      <% } else { %>
                      <button
                        class="btn btn-soft-success btn-icon toggle-status"
                        data-id="<%= coupon._id %>"
                        data-bs-toggle="tooltip"
                        data-bs-placement="top"
                        title="Activate Coupon"
                      >
                        <i class="fas fa-check"></i>
                      </button>
                      <% } %>
                      <button
                        class="btn btn-soft-danger btn-icon delete-coupon"
                        data-id="<%= coupon._id %>"
                        data-bs-toggle="tooltip"
                        data-bs-placement="top"
                        title="Delete Coupon"
                      >
                        <i class="fas fa-trash-alt"></i>
                      </button>
                    </div>
                  </td>
                </tr>
                <% }) %>
              </tbody>
            </table>
          </div>
          
          <!-- Pagination -->
          <% if (totalPages > 1) { %>
          <nav aria-label="Coupon pagination" class="mt-4">
            <ul class="pagination justify-content-center">
              <% if (hasPrevPage) { %>
                <li class="page-item">
                  <a class="page-link" href="?page=<%= currentPage - 1 %>" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                  </a>
                </li>
              <% } %>
              
              <% for(let i = 1; i <= totalPages; i++) { %>
                <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                  <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                </li>
              <% } %>
              
              <% if (hasNextPage) { %>
                <li class="page-item">
                  <a class="page-link" href="?page=<%= currentPage + 1 %>" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                  </a>
                </li>
              <% } %>
            </ul>
          </nav>
          <% } %>
        </div>
      </div>

      <!-- Add Coupon Modal -->
      <div
        class="modal fade"
        id="addCouponModal"
        tabindex="-1"
        aria-labelledby="addCouponModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="addCouponModalLabel">
                Add New Coupon
              </h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body">
              <form id="addCouponForm" novalidate>
                <div class="mb-3">
                  <label for="couponName" class="form-label">Coupon Name</label>
                  <input
                    type="text"
                    class="form-control"
                    id="couponName"
                    name="name"
                    required
                    minlength="3"
                  />
                  <div class="error-feedback text-danger mt-1"></div>
                </div>
                <div class="mb-3">
                  <label for="expireDate" class="form-label">Expiry Date</label>
                  <input
                    type="date"
                    class="form-control"
                    id="expireDate"
                    name="expireOn"
                    required
                  />
                  <div class="error-feedback text-danger mt-1"></div>
                </div>
                <div class="mb-3">
                  <label for="offerPrice" class="form-label"
                    >Offer Amount (₹)</label
                  >
                  <input
                    type="number"
                    class="form-control"
                    id="offerPrice"
                    name="offerPrice"
                    required
                    min="1"
                    step="1"
                  />
                  <div class="error-feedback text-danger mt-1"></div>
                </div>
                <div class="mb-3">
                  <label for="minimumPrice" class="form-label"
                    >Minimum Purchase Amount (₹)</label
                  >
                  <input
                    type="number"
                    class="form-control"
                    id="minimumPrice"
                    name="minimumPrice"
                    required
                    min="1"
                    step="1"
                  />
                  <div class="error-feedback text-danger mt-1"></div>
                </div>
                <div class="mb-3">
                  <label for="maxUses" class="form-label"
                    >Maximum Total Uses</label
                  >
                  <input
                    type="number"
                    class="form-control"
                    id="maxUses"
                    name="maxUses"
                    required
                    min="1"
                    step="1"
                  />
                  <div class="error-feedback text-danger mt-1"></div>
                </div>
                <div class="mb-3">
                  <label for="maxUsesPerUser" class="form-label"
                    >Maximum Uses Per User</label
                  >
                  <input
                    type="number"
                    class="form-control"
                    id="maxUsesPerUser"
                    name="maxUsesPerUser"
                    required
                    min="1"
                    step="1"
                  />
                  <div class="error-feedback text-danger mt-1"></div>
                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary"
                data-bs-dismiss="modal"
              >
                Cancel
              </button>
              <button type="button" class="btn btn-primary" id="saveCoupon">
                Save Coupon
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Bootstrap JS and dependencies -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script>

<!-- Add SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Initialize tooltips
    const tooltipTriggerList = [].slice.call(
      document.querySelectorAll('[data-bs-toggle="tooltip"]')
    );
    const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // Form validation and submission
    const form = document.getElementById("addCouponForm");
    const submitBtn = document.getElementById("saveCoupon");

    // Function to show error message
    const showError = (input, message) => {
      const errorDiv = input.nextElementSibling;
      errorDiv.textContent = message;
      input.classList.add("is-invalid");
    };

    // Function to clear error message
    const clearError = (input) => {
      const errorDiv = input.nextElementSibling;
      errorDiv.textContent = "";
      input.classList.remove("is-invalid");
    };

    // Input validation
    form.querySelectorAll("input").forEach((input) => {
      input.addEventListener("input", function () {
        clearError(this);

        if (this.type === "number" && this.value < 0) {
          this.value = 0; // Prevent negative values
        }
      });
    });

    submitBtn.addEventListener("click", async function () {
      let isValid = true;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData);

      // Validate coupon name
      if (!data.name || data.name.length < 3) {
        showError(
          form.couponName,
          "Coupon name must be at least 3 characters long"
        );
        isValid = false;
      }

      // Validate expiry date
      const today = new Date();
      const expiryDate = new Date(data.expireOn);
      if (!data.expireOn || expiryDate <= today) {
        showError(form.expireDate, "Expiry date must be in the future");
        isValid = false;
      }

      // Validate offer amount
      if (!data.offerPrice || data.offerPrice <= 0) {
        showError(form.offerPrice, "Offer amount must be greater than 0");
        isValid = false;
      }

      // Validate minimum purchase
      if (!data.minimumPrice || data.minimumPrice <= 0) {
        showError(
          form.minimumPrice,
          "Minimum purchase amount must be greater than 0"
        );
        isValid = false;
      }

      // Validate offer vs minimum purchase
      if (parseFloat(data.offerPrice) >= parseFloat(data.minimumPrice)) {
        showError(
          form.offerPrice,
          "Offer amount must be less than minimum purchase amount"
        );
        isValid = false;
      }

      // Validate usage limits
      if (!data.maxUses || data.maxUses < 1) {
        showError(form.maxUses, "Maximum uses must be at least 1");
        isValid = false;
      }

      if (!data.maxUsesPerUser || data.maxUsesPerUser < 1) {
        showError(
          form.maxUsesPerUser,
          "Maximum uses per user must be at least 1"
        );
        isValid = false;
      }

      if (isValid) {
        try {
          const response = await fetch("/admin/coupons/add", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          });

          const result = await response.json();

          if (result.success) {
            Swal.fire({
              icon: "success",
              title: "Success!",
              text: "Coupon added successfully",
              showConfirmButton: false,
              timer: 1500,
            }).then(() => {
              location.reload();
            });
          } else {
            if (result.error) {
              const inputField = form[result.field];
              if (inputField) {
                showError(inputField, result.error);
              } else {
                Swal.fire({
                  icon: "error",
                  title: "Oops...",
                  text: result.error,
                });
              }
            }
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "Something went wrong while adding the coupon",
          });
        }
      }
    });

    // Toggle status
    document.querySelectorAll(".toggle-status").forEach((button) => {
      button.addEventListener("click", async function () {
        const couponId = this.dataset.id;
        const isActive = this.querySelector("i").classList.contains("fa-ban");
        const action = isActive ? "deactivate" : "activate";

        try {
          const { isConfirmed } = await Swal.fire({
            title: `${
              action.charAt(0).toUpperCase() + action.slice(1)
            } Coupon?`,
            text: `Are you sure you want to ${action} this coupon?`,
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: `Yes, ${action} it!`,
          });

          if (isConfirmed) {
            const response = await fetch(
              `/admin/coupons/toggle-status/${couponId}`,
              {
                method: "PUT",
              }
            );

            if (response.ok) {
              Swal.fire({
                icon: "success",
                title: "Success!",
                text: `Coupon ${action}d successfully`,
                showConfirmButton: false,
                timer: 1500,
              }).then(() => {
                location.reload();
              });
            }
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Oops...",
            text: `Error ${action}ing coupon`,
          });
        }
      });
    });

    // Delete coupon
    document.querySelectorAll(".delete-coupon").forEach((button) => {
      button.addEventListener("click", async function () {
        const couponId = this.dataset.id;

        try {
          const { isConfirmed } = await Swal.fire({
            title: "Delete Coupon?",
            text: "You won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "Yes, delete it!",
          });

          if (isConfirmed) {
            const response = await fetch(`/admin/coupons/delete/${couponId}`, {
              method: "DELETE",
            });

            if (response.ok) {
              Swal.fire({
                icon: "success",
                title: "Deleted!",
                text: "Coupon has been deleted.",
                showConfirmButton: false,
                timer: 1500,
              }).then(() => {
                location.reload();
              });
            }
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "Error deleting coupon",
          });
        }
      });
    });
  });
</script>
