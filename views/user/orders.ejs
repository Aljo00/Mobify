<%- include('../../views/layout/header.ejs') %>

<link
  href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
  rel="stylesheet"
/>
<link
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
  rel="stylesheet"
/>
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
/>
<link rel="stylesheet" href="/styles/user/orders.css" />
<link
  href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.min.css"
  rel="stylesheet"
/>

<style>
  .order-status-cancelled {
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    padding: 1rem;
    border-radius: 8px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .order-status.cancelled {
    background-color: #dc3545;
    color: white;
  }

  .cancelled-message {
    color: #721c24;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .cancelled-message i {
    font-size: 1.1rem;
  }
</style>

<div class="container-fluid">
  <nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
      <li class="breadcrumb-item">
        <a href="/" class="text-decoration-none">Home</a>
      </li>
      <li class="breadcrumb-item active">Orders</li>
    </ol>
  </nav>

  <div class="row g-4">
    <!-- Sidebar -->
    <div class="col-md-3">
      <div class="list-group">
        <a href="/account" class="list-group-item list-group-item-action">
          <i class="fas fa-user icon-img"></i> Account
        </a>
        <a href="/addresses" class="list-group-item list-group-item-action">
          <i class="fas fa-map-marker-alt icon-img"></i> Address
        </a>
        <a href="/orders" class="list-group-item list-group-item-action active">
          <i class="fas fa-box icon-img"></i> Orders
        </a>
        <a href="#" class="list-group-item list-group-item-action">
          <i class="fas fa-heart icon-img"></i> Wishlist
        </a>
        <a href="/wallet" class="list-group-item list-group-item-action">
          <i class="fas fa-wallet icon-img"></i> Wallet
        </a>
        <a href="#" class="list-group-item list-group-item-action">
          <i class="fas fa-key icon-img"></i> Reset Password
        </a>
        <a href="/logout" class="list-group-item list-group-item-action">
          <i class="fas fa-sign-out-alt icon-img"></i> Logout
        </a>
      </div>
    </div>

    <!-- Main Content -->
    <div class="col-md-9">
      <h2 class="mb-4 fw-bold">My Orders</h2>
      <div class="order-cards">
        <% orders.forEach(order => { %>
        <div class="order-card">
          <div class="order-products">
            <% order.orderedItems.forEach(item => { %>
            <div class="order-item">
              <div class="order-item-image me-3">
                <img
                  src="<%= item.product.productImage[0] %>"
                  class="img-fluid rounded"
                  alt="Product Image"
                />
              </div>
              <div class="order-item-details flex-grow-1">
                <h5 class="card-title">
                  <a
                    href="/orders/<%= item.orderId %>?productId=<%= item._id %>"
                    ><%= item.product.productName %></a
                  >
                </h5>
                <p class="card-text">Unit Price: ₹<%= item.price %></p>
                <p class="card-text">Quantity: <%= item.quantity %></p>
                <p class="card-text">Total Price: ₹<%= item.totalPrice %></p>
              </div>
            </div>
            <div class="order-status-bar">
              <div
                class="status-step <%= item.status === 'Pending' || item.status === 'Processing' || item.status === 'Shipped' || item.status === 'Delivered' ? 'active' : '' %>"
              >
                <i class="fas fa-box"></i> Pending
              </div>
              <div
                class="status-step <%= item.status === 'Processing' || item.status === 'Shipped' || item.status === 'Delivered' ? 'active' : '' %>"
              >
                <i class="fas fa-cogs"></i> Processing
              </div>
              <div
                class="status-step <%= item.status === 'Shipped' || item.status === 'Delivered' ? 'active' : '' %>"
              >
                <i class="fas fa-truck"></i> Shipped
              </div>
              <div
                class="status-step <%= item.status === 'Delivered' ? 'active' : '' %>"
              >
                <i class="fas fa-check"></i> Delivered
              </div>
            </div>
            <% }) %>
          </div>
          <div class="order-address">
            <i class="fas fa-map-marker-alt"></i>
            <%= order.address.houseName %>, <%= order.address.city %>, <%=
            order.address.state %> - <%= order.address.pincode %>
          </div>
          <div class="order-payment-info">
            <i class="fas fa-money-bill-wave"></i>
            Payment Method:
            <span
              class="payment-badge <%= order.paymentMethod === 'cod' ? 'badge-cod' : order.paymentMethod === 'wallet' ? 'badge-wallet' : 'badge-online' %>"
            >
              <%= order.paymentMethod %>
            </span>
            <% if (order.paymentMethod === 'COD' && order.orderedItems[0].status
            !== 'Cancelled' && (order.orderedItems[0].status === 'Pending' ||
            order.orderedItems[0].status === 'Processing')) { %>
            <button
              class="btn btn-outline-primary btn-sm ms-2"
              onclick="handleCodToOnline('<%= order._id %>')"
            >
              Pay with Razorpay
            </button>
            <% } %>
          </div>
          <div
            class="<%= order.orderedItems[0].status === 'Cancelled' ? 'order-status-cancelled' : 'order-status-cancel' %>"
          >
            <span
              class="order-status badge <%= order.orderedItems[0].status === 'Cancelled' ? 'cancelled' : order.orderedItems[0].status === 'Return Request' ? 'bg-info' : order.orderedItems[0].status === 'Returned' ? 'bg-secondary' : 'bg-warning text-dark' %>"
            >
              <%= order.orderedItems[0].status %>
            </span>

            <div class="d-flex gap-2">
              <% if (order.orderedItems[0].status === 'Cancelled') { %>
              <div class="cancelled-message">
                <i class="fas fa-info-circle"></i>
                Amount refunded to wallet
              </div>
              <% } else if (order.orderedItems[0].status === 'Payment Pending'
              && order.paymentMethod === 'razorpay') { %>
              <button
                class="btn btn-primary btn-sm"
                onclick="handlePayNow('<%= order._id %>')"
              >
                Pay Now
              </button>
              <% } else if (order.orderedItems[0].status === 'Delivered' ||
              order.orderedItems[0].status === 'Shipped') { %>
              <button
                class="btn btn-warning btn-sm"
                onclick="initiateReturn('<%= order._id %>')"
              >
                Return Request
              </button>
              <button
                class="btn btn-primary btn-sm"
                onclick="downloadInvoice('<%= order._id %>')"
              >
                <i class="fas fa-download"></i> Invoice
              </button>
              <% } else if (order.orderedItems[0].status === 'Return Request') {
              %>
              <div class="return-message">
                <i class="fas fa-hourglass-half"></i>
                Return request processing
              </div>
              <% } else if (order.orderedItems[0].status === 'Returned') { %>
              <div class="returned-message">
                <i class="fas fa-check-circle"></i>
                Product returned successfully
              </div>
              <% } else { %>
              <button
                class="btn btn-danger btn-sm"
                onclick="cancelOrder('<%= order._id %>', '<%= order.paymentMethod %>')"
              >
                Cancel Order
              </button>
              <% if (order.paymentMethod === 'cod' && ['Pending',
              'Processing'].includes(order.orderedItems[0].status)) { %>
              <button
                class="btn btn-outline-primary btn-sm"
                onclick="handleCodToOnline('<%= order._id %>')"
              >
                Pay with Razorpay
              </button>
              <% } %> <% } %>
            </div>
          </div>
        </div>
        <% }) %>
      </div>

      <!-- Pagination -->
      <% if (pagination.totalPages > 1) { %>
      <nav aria-label="Orders pagination" class="mt-4">
        <ul class="pagination justify-content-center">
          <!-- First page button -->
          <li class="page-item <%= pagination.currentPage === 1 ? 'disabled' : '' %>">
            <a class="page-link" href="/orders?page=1" aria-label="First">
              <i class="fas fa-angle-double-left"></i>
            </a>
          </li>
          
          <!-- Previous button -->
          <% if (pagination.hasPrevPage) { %>
            <li class="page-item">
              <a class="page-link" href="/orders?page=<%= pagination.prevPage %>" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
              </a>
            </li>
          <% } %>

          <!-- Page numbers -->
          <% 
          let startPage = Math.max(1, pagination.currentPage - 1);
          let endPage = Math.min(pagination.totalPages, startPage + 2);
          
          if (endPage - startPage < 2) {
            if (startPage === 1) {
              endPage = Math.min(3, pagination.totalPages);
            } else {
              startPage = Math.max(1, pagination.totalPages - 2);
            }
          }
          
          for(let i = startPage; i <= endPage; i++) { %>
            <li class="page-item <%= i === pagination.currentPage ? 'active' : '' %>">
              <a class="page-link" href="/orders?page=<%= i %>"><%= i %></a>
            </li>
          <% } %>

          <!-- Next button -->
          <% if (pagination.hasNextPage) { %>
            <li class="page-item">
              <a class="page-link" href="/orders?page=<%= pagination.nextPage %>" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
              </a>
            </li>
          <% } %>

          <!-- Last page button -->
          <li class="page-item <%= pagination.currentPage === pagination.totalPages ? 'disabled' : '' %>">
            <a class="page-link" href="/orders?page=<%= pagination.totalPages %>" aria-label="Last">
              <i class="fas fa-angle-double-right"></i>
            </a>
          </li>
        </ul>
      </nav>
      <% } %>
    </div>
  </div>
</div>

<!-- Add this before your other scripts -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>

<script>
  function cancelOrder(orderId, paymentMethod) {
    const message =
      paymentMethod === "COD"
        ? "Are you sure you want to cancel this order?"
        : "The order amount will be refunded to your wallet.";

    Swal.fire({
      title: "Are you sure?",
      text: message,
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, cancel it!",
      cancelButtonText: "No, keep it",
    }).then((result) => {
      if (result.isConfirmed) {
        fetch("/cancel-order", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ orderId }),
        })
          .then(async (response) => {
            const data = await response.json();
            if (!response.ok) {
              throw new Error(data.message || "Failed to cancel order");
            }
            return data;
          })
          .then((data) => {
            if (data.success) {
              const successMessage =
                paymentMethod === "COD"
                  ? "Order has been cancelled."
                  : "Order has been cancelled and amount refunded to your wallet.";

              Swal.fire({
                title: "Cancelled!",
                text: successMessage,
                icon: "success",
              }).then(() => {
                location.reload();
              });
            } else {
              throw new Error(data.message || "Failed to cancel order");
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            Swal.fire({
              title: "Error!",
              text:
                error.message || "An error occurred while cancelling the order",
              icon: "error",
              confirmButtonColor: "#3085d6",
            });
          });
      }
    });
  }

  function initiateReturn(orderId) {
    Swal.fire({
      title: "Initiate Return Request",
      text: "Are you sure you want to return this order?",
      icon: "question",
      input: "textarea",
      inputLabel: "Return Reason",
      inputPlaceholder: "Please provide a reason for return...",
      inputValidator: (value) => {
        if (!value) {
          return "You need to provide a reason for return!";
        }
      },
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, return it!",
    }).then((result) => {
      if (result.isConfirmed) {
        fetch("/return-request", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            orderId,
            reason: result.value,
          }),
        })
          .then(async (response) => {
            const data = await response.json();
            if (!response.ok) {
              throw new Error(
                data.message || "Failed to submit return request"
              );
            }
            return data;
          })
          .then((data) => {
            if (data.success) {
              Swal.fire({
                title: "Return Requested!",
                text: "Your return request has been submitted successfully.",
                icon: "success",
              }).then(() => {
                location.reload();
              });
            } else {
              throw new Error(
                data.message || "Failed to submit return request"
              );
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            Swal.fire({
              title: "Error!",
              text:
                error.message ||
                "An error occurred while submitting return request",
              icon: "error",
              confirmButtonColor: "#3085d6",
            });
          });
      }
    });
  }

  function handlePayNow(orderId) {
    Swal.fire({
      title: "Processing...",
      text: "Checking stock availability",
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      },
    });

    // First check stock availability
    fetch(`/check-stock/${orderId}`)
      .then((response) => response.json())
      .then((data) => {
        if (!data.success) {
          throw new Error(data.message);
        }

        // If stock is available, initiate payment
        return fetch("/initiate-pending-payment", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ orderId }),
        });
      })
      .then((response) => response.json())
      .then((order) => {
        if (!order.success) {
          throw new Error(order.message);
        }

        Swal.close();

        var options = {
          key: order.key_id,
          amount: order.amount,
          currency: "INR",
          name: "Mobify",
          description: "Payment for order",
          order_id: order.id,
          handler: function (response) {
            Swal.fire({
              title: "Processing Payment...",
              allowOutsideClick: false,
              didOpen: () => {
                Swal.showLoading();
              },
            });

            fetch("/verify-pending-payment", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                orderId: orderId,
                payment_id: response.razorpay_payment_id,
                order_id: response.razorpay_order_id,
                signature: response.razorpay_signature,
              }),
            })
              .then((response) => response.json())
              .then((data) => {
                if (data.success) {
                  Swal.fire({
                    title: "Success!",
                    text: "Payment successful!",
                    icon: "success",
                  }).then(() => {
                    location.reload();
                  });
                } else {
                  throw new Error(data.message);
                }
              })
              .catch((error) => {
                Swal.fire({
                  title: "Payment Verification Failed",
                  text: error.message || "Failed to verify payment",
                  icon: "error",
                });
              });
          },
          prefill: {
            name: "<%= user.name %>",
            email: "<%= user.email %>",
          },
          theme: {
            color: "#3399cc",
          },
        };

        var rzp1 = new Razorpay(options);
        rzp1.on("payment.failed", function (response) {
          Swal.fire({
            title: "Payment Failed",
            text: response.error.description,
            icon: "error",
          });
        });
        rzp1.open();
      })
      .catch((error) => {
        Swal.fire({
          title: "Error",
          text: error.message || "Something went wrong",
          icon: "error",
        });
      });
  }

  function handleCodToOnline(orderId) {
    Swal.fire({
      title: "Switch to Online Payment?",
      text: "You're about to pay online for your COD order",
      icon: "question",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, pay now",
    }).then((result) => {
      if (result.isConfirmed) {
        fetch("/initiate-cod-to-online", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ orderId }),
        })
          .then((response) => response.json())
          .then((order) => {
            if (!order.success) {
              throw new Error(order.message);
            }

            var options = {
              key: order.key_id,
              amount: order.amount,
              currency: "INR",
              name: "Mobify",
              description: "Payment for COD order",
              order_id: order.id,
              handler: function (response) {
                Swal.fire({
                  title: "Processing Payment...",
                  allowOutsideClick: false,
                  didOpen: () => {
                    Swal.showLoading();
                  },
                });

                fetch("/verify-cod-to-online", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    orderId: orderId,
                    payment_id: response.razorpay_payment_id,
                    order_id: response.razorpay_order_id,
                    signature: response.razorpay_signature,
                  }),
                })
                  .then((response) => response.json())
                  .then((data) => {
                    if (data.success) {
                      Swal.fire({
                        title: "Success!",
                        text: "Payment method updated successfully!",
                        icon: "success",
                      }).then(() => {
                        location.reload();
                      });
                    } else {
                      throw new Error(data.message);
                    }
                  })
                  .catch((error) => {
                    Swal.fire({
                      title: "Error!",
                      text: error.message || "Failed to update payment method",
                      icon: "error",
                    });
                  });
              },
              prefill: {
                name: "<%= user.name %>",
                email: "<%= user.email %>",
              },
              theme: {
                color: "#3399cc",
              },
            };

            var rzp1 = new Razorpay(options);
            rzp1.on("payment.failed", function (response) {
              Swal.fire({
                title: "Payment Failed",
                text: response.error.description,
                icon: "error",
              });
            });
            rzp1.open();
          })
          .catch((error) => {
            Swal.fire({
              title: "Error",
              text: error.message || "Something went wrong",
              icon: "error",
            });
          });
      }
    });
  }

  function downloadInvoice(orderId) {
    fetch(`/download-invoice/${orderId}`)
      .then(response => response.blob())
      .then(blob => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `invoice-${orderId}.pdf`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        a.remove();
      })
      .catch(error => {
        console.error('Error downloading invoice:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Failed to download invoice',
          icon: 'error'
        });
      });
  }
</script>

<%- include('../../views/layout/footer.ejs') %>
