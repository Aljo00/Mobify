<%- include('../../views/layout/header.ejs') %>

<!-- Bootstrap CSS -->
<link
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
  rel="stylesheet"
/>
<!-- Font Awesome -->
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
/>
<!-- Custom CSS -->
<link rel="stylesheet" href="/styles/user/checkOut.css" />

<div class="checkout-container">
  <!-- Breadcrumbs -->
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item active" aria-current="page">Checkout</li>
    </ol>
  </nav>
  <div class="row">
    <div class="col-md-8">
      <div class="checkout-header">
        <h1>Checkout</h1>
      </div>
      <form
        class="checkout-form"
        action="/place-order"
        method="post"
        id="checkoutForm"
      >
        <!-- Step 1: Address Section -->
        <div id="addressSection" class="section">
          <h2>Shipping Address</h2>
          <div class="row">
            <% addresses.forEach((address, index) => { %>
              <% address.address.forEach((addr, addrIndex) => { %>
                <div class="col-md-6 mb-4">
                  <div class="card address-card hover-effect" onclick="selectAddress('<%= index %>-<%= addrIndex %>')">
                    <div class="card-body">
                      <input type="radio" id="address<%= index %>-<%= addrIndex %>"
                      name="selectedAddress" value="<%= addr._id %>" onchange="toggleAddressActions(this)">
                      <label for="address<%= index %>-<%= addrIndex %>">
                        <h5 class="card-title">
                          <%= addr.houseName %> (<%= addr.addressType %>)
                        </h5>
                        <p class="card-text">
                          <%= addr.city %>, <%= addr.state %> - <%= addr.pincode %>
                        </p>
                        <p class="card-text">Landmark: <%= addr.landMark %></p>
                        <p class="card-text">Phone: <%= addr.phone %></p>
                        <p class="card-text">Alt Phone: <%= addr.altPhone %></p>
                      </label>
                      <div class="address-actions" style="display: none;">
                        <a href="/edit-address/<%= addr._id %>">
                          <button type="button" class="btn btn-secondary btn-sm edit-address">
                            <i class="fas fa-edit"></i> Edit
                          </button>
                        </a>
                        <a href="#" onclick="deleteAddress('<%= addr._id %>')">
                          <button type="button" class="btn btn-danger btn-sm delete-address">
                            <i class="fas fa-trash-alt"></i> Delete
                          </button>
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              <% }) %>
            <% }) %>
          </div>
        </div>

        <!-- Step 2: Payment Options Section -->
        <div id="paymentOptions" class="section">
          <h2>Payment Options</h2>
          <div class="btn-group" role="group" aria-label="Payment Methods">
            <input type="radio" class="btn-check" name="paymentMethod" id="cod" value="cod" autocomplete="off">
            <label class="btn btn-outline-primary" for="cod">
              <i class="fas fa-money-bill-wave"></i> Cash on Delivery (COD)
            </label>

            <input type="radio" class="btn-check" name="paymentMethod" id="razorpay" value="razorpay" autocomplete="off">
            <label class="btn btn-outline-primary" for="razorpay">
              <i class="fas fa-credit-card"></i> Razorpay
            </label>

            <input type="radio" class="btn-check" name="paymentMethod" id="wallet" value="wallet" autocomplete="off">
            <label class="btn btn-outline-primary" for="wallet">
              <i class="fas fa-wallet"></i> Wallet
            </label>
          </div>
        </div>
    </div>

    <!-- Cart Summary Section -->
    <div class="col-md-4">
      <div class="cart-summary">
        <h2>Cart Summary</h2>
        <% cart.items.filter(item => item.quantity > 0).forEach(item => { %>
          <div class="cart-item">
            <img src="<%= item.ProductId.productImage[0] %>" alt="<%= item.ProductId.productName %>" style="width: 60px; height: 60px; object-fit: cover; border-radius: 5px; margin-right: 10px;">
            <div class="cart-item-details">
              <p class="cart-item-name"><%= item.ProductId.productName %></p>
              <p class="cart-item-quantity">Quantity: <%= item.quantity %></p>
              <p class="cart-item-total">Total: ₹<%= item.totalPrice %></p>
            </div>
          </div>
        <% }) %>
        <p class="cart-total">Total: ₹<%= cart.items.filter(item => item.quantity > 0).reduce((acc, item) => acc + item.totalPrice, 0) %></p>
        <button class="btn btn-primary" type="submit">Place Order</button>
      </div>
    </div>
    </form>
  </div>
</div>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

  $(document).ready(function() {
    // Assuming you already have a button for payment
    $('.pay-now').click(async function() {
      // Get the amount you want to pass from the frontend
      const amount = 1000; // For example, 1000 paise = ₹10
      
      try {
        // Fetch order details from your backend
        const response = await fetch("/create-order", {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ amount: amount })
        });

        const data = await response.json();

        if (data.success) {
          // Initialize Razorpay checkout with order details
          const options = {
            key: 'YOUR_RAZORPAY_API_KEY', // Replace with your actual Razorpay API key
            amount: data.order.amount, // Order amount from backend (in paise)
            currency: data.order.currency, // Currency from backend
            name: 'Your Company Name',
            description: 'Payment for Order',
            order_id: data.order.id, // Order ID from Razorpay response
            handler: function (response) {
              // Handle the payment success here
              console.log(response);
              alert("Payment successful!");
            },
            prefill: {
              name: "Customer Name",
              email: "customer@example.com",
              contact: "1234567890"
            },
            notes: {
              address: "Customer Address"
            },
            theme: {
              color: "#F37254" // Change the theme color
            }
          };

          const rzp = new Razorpay(options);
          rzp.open(); // Open Razorpay checkout window
        } else {
          alert('Failed to create order. Please try again!');
        }
      } catch (error) {
        console.error("Error:", error);
        alert("An error occurred. Please try again.");
      }
    });
  });

  document.getElementById('checkoutForm').addEventListener('submit', async function(event) {
    event.preventDefault(); // Prevent the default form submission

    const form = this;
    const formData = new FormData(form);

    try {
      const response = await fetch(form.action, {
        method: 'POST',
        body: formData
      });

      const data = await response.json();

      if (data.success) {
        Swal.fire({
          title: 'Order Placed!',
          text: 'Your order has been placed successfully.',
          icon: 'success',
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.href = '/order-confirmation'; // Redirect to order confirmation page
        });
      } else {
        Swal.fire({
          title: 'Error!',
          text: data.message || 'Failed to place the order. Please try again.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire({
        title: 'Error!',
        text: 'An error occurred. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  });

  function toggleAddressActions(radio) {
    document.querySelectorAll('.address-actions').forEach(action => {
      action.style.display = 'none';
    });
    if (radio.checked) {
      radio.closest('.card-body').querySelector('.address-actions').style.display = 'flex';
    }
  }

  function selectAddress(id) {
    const radio = document.getElementById('address' + id);
    radio.checked = true;
    toggleAddressActions(radio);
  }

  // Initialize the display for the initially checked address
  document.addEventListener('DOMContentLoaded', () => {
    const checkedRadio = document.querySelector('input[name="selectedAddress"]:checked');
    if (checkedRadio) {
      toggleAddressActions(checkedRadio);
    }
  });
</script>

<%- include('../../views/layout/footer.ejs') %>
