<%- include('../../views/layout/admin/header.ejs')%>

<!-- Bootstrap CSS -->
<link
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
  rel="stylesheet"
/>
<!-- Font Awesome -->
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
/>
<!-- Custom CSS -->
<link rel="stylesheet" href="/styles/admin/dashboard.css" />

<!-- Add Google Fonts -->
<link
  href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
  rel="stylesheet"
/>

<style>
  .card {
    cursor: pointer;
  }

  /* Add these new styles for the download buttons */
  .download-btn {
    padding: 8px 16px;
    border-radius: 6px;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    transition: all 0.2s ease;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .download-btn-excel {
    background-color: #10b981;
    border: 1px solid #059669;
    color: white;
  }

  .download-btn-excel:hover {
    background-color: #059669;
    color: white;
  }

  .download-btn-pdf {
    background-color: #ef4444;
    border: 1px solid #dc2626;
    color: white;
  }

  .download-btn-pdf:hover {
    background-color: #dc2626;
    color: white;
  }

  .download-btn i {
    font-size: 14px;
  }

  .download-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed !important;
    pointer-events: none;
    position: relative;
  }

  .download-btn:disabled::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    cursor: not-allowed;
  }

  /* Add hover style to show it's not clickable */
  .download-btn:disabled:hover {
    box-shadow: none;
    transform: none;
  }
</style>

<div class="wrapper">
  <div class="sidebar">
    <h2><i class="fas fa-mobile-alt me-2"></i>Mobify</h2>
    <a href="#" class="active">
      <i class="fas fa-chart-line"></i>
      <span>Dashboard</span>
    </a>
    <a href="/admin/users">
      <i class="fas fa-users"></i>
      <span>Users</span>
    </a>
    <a href="/admin/category">
      <i class="fas fa-list"></i>
      <span>Categories</span>
    </a>
    <a href="/admin/brands">
      <i class="fas fa-tags"></i>
      <span>Brands</span>
    </a>
    <a href="/admin/addProducts">
      <i class="fas fa-plus"></i>
      <span>Add Products</span>
    </a>
    <a href="/admin/products">
      <i class="fas fa-box"></i>
      <span>Products</span>
    </a>
    <a href="/admin/orders">
      <i class="fas fa-shopping-cart"></i>
      <span>Orders</span>
    </a>
    <a href="/admin/coupons">
      <i class="fas fa-ticket-alt"></i>
      <span>Coupons</span>
    </a>
    <a href="#">
      <i class="fas fa-cog"></i>
      <span>Settings</span>
    </a>
    <a href="/admin/logout">
      <i class="fas fa-sign-out-alt"></i>
      <span>Logout</span>
    </a>
  </div>
  <div class="main-content">
    <div class="container-fluid">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h4 class="mb-0">Dashboard Overview</h4>
        <div class="date text-muted">
          <%= new Date().toLocaleDateString('en-US', { weekday: 'long', year:
          'numeric', month: 'long', day: 'numeric' }) %>
        </div>
      </div>

      <div class="row g-4">
        <div class="col-md-3">
          <div class="card stat-card">
            <div class="icon bg-primary-subtle">
              <i class="fas fa-rupee-sign text-primary"></i>
            </div>
            <h6 class="text-muted mb-2">Total Revenue</h6>
            <h4 class="mb-0" id="revenueStat">
              â‚¹<%= totalRevenue.toLocaleString('en-IN') %>
            </h4>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card stat-card">
            <div class="icon bg-primary-subtle">
              <i class="fas fa-shopping-cart text-primary"></i>
            </div>
            <h6 class="text-muted mb-2">Total Orders</h6>
            <h4 class="mb-0" id="ordersStat"><%= totalOrders %></h4>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card stat-card">
            <div class="icon bg-primary-subtle">
              <i class="fas fa-users text-primary"></i>
            </div>
            <h6 class="text-muted mb-2">Active Users</h6>
            <h4 class="mb-0"><%= totalUsers %></h4>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card stat-card">
            <div class="icon bg-primary-subtle">
              <i class="fas fa-box text-primary"></i>
            </div>
            <h6 class="text-muted mb-2">Total Products</h6>
            <h4 class="mb-0"><%= totalProducts %></h4>
          </div>
        </div>
      </div>

      <!-- Chart Section -->
      <div class="row mt-4">
        <div class="col-12">
          <div class="card">
            <div class="card-body">
              <div
                class="d-flex justify-content-between align-items-center mb-3"
              >
                <h5 class="card-title mb-0">Orders Trend</h5>
                <div class="d-flex gap-2">
                  <div class="dropdown">
                    <button
                      class="btn btn-primary dropdown-toggle"
                      type="button"
                      id="timeRangeDropdown"
                      data-bs-toggle="dropdown"
                      aria-expanded="false"
                    >
                      Weekly View
                    </button>
                    <ul
                      class="dropdown-menu"
                      aria-labelledby="timeRangeDropdown"
                    >
                      <li>
                        <a class="dropdown-item" href="#" data-range="today"
                          >Today's View</a
                        >
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-range="yearly"
                          >Yearly View</a
                        >
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-range="monthly"
                          >Monthly View</a
                        >
                      </li>
                      <li>
                        <a
                          class="dropdown-item active"
                          href="#"
                          data-range="weekly"
                          >Weekly View</a
                        >
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-range="custom"
                          >Custom Range</a
                        >
                      </li>
                    </ul>
                  </div>

                  <!-- Add this right after the dropdown -->
                  <div id="dateRangePicker" class="d-none">
                    <div class="input-group me-2">
                      <input type="date" class="form-control" id="startDate" />
                      <span class="input-group-text">to</span>
                      <input type="date" class="form-control" id="endDate" />
                      <button
                        class="btn btn-primary"
                        onclick="applyDateRange()"
                      >
                        Apply
                      </button>
                    </div>
                  </div>

                  <button
                    class="download-btn download-btn-excel"
                    onclick="downloadReport('excel')"
                    id="excelBtn"
                  >
                    <i class="fas fa-file-excel"></i>
                    Excel Report
                  </button>
                  <button
                    class="download-btn download-btn-pdf"
                    onclick="downloadReport('pdf')"
                    id="pdfBtn"
                  >
                    <i class="fas fa-file-pdf"></i>
                    PDF Report
                  </button>
                </div>
              </div>
              <div class="chart-container" style="height: 400px">
                <canvas id="ordersChart"></canvas>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- New Charts Row -->
      <div class="row chart-row">
        <!-- Payment Methods Chart -->
        <div class="col-md-6">
          <div class="chart-card">
            <h5 class="chart-title">Payment Methods Distribution</h5>
            <div class="chart-container-small">
              <canvas id="paymentMethodsChart"></canvas>
              <div id="paymentLegend" class="custom-legend mt-3"></div>
            </div>
          </div>
        </div>
        <!-- Order Status Chart -->
        <div class="col-md-6">
          <div class="chart-card">
            <h5 class="chart-title">Order Status Distribution</h5>
            <div class="chart-container-small">
              <canvas id="orderStatusChart"></canvas>
            </div>
          </div>
        </div>
      </div>

      <!-- Orders Table Section -->
      <div class="row mt-4">
        <div class="col-12">
          <div class="card">
            <div class="card-body">
              <div
                class="d-flex justify-content-between align-items-center mb-4"
              >
                <h5 class="card-title mb-0">Recent Orders</h5>
                <a href="/admin/orders" class="btn btn-primary btn-sm">
                  View All <i class="fas fa-arrow-right ms-2"></i>
                </a>
              </div>
              <div class="table-responsive">
                <table class="table table-hover">
                  <thead>
                    <tr>
                      <th>Order ID</th>
                      <th>Date</th>
                      <th>Customer</th>
                      <th>Status</th>
                      <th>Amount</th>
                    </tr>
                  </thead>
                  <tbody id="ordersTableBody">
                    <% orders.slice(0, 5).forEach(order => { %>
                    <tr>
                      <td><%= order.orderId %></td>
                      <td>
                        <%= new Date(order.createdAt).toLocaleDateString() %>
                      </td>
                      <td><%= order.userId.name %></td>
                      <td>
                        <span
                          class="badge bg-<%= order.orderedItems[0].status === 'Delivered' ? 'success' : order.orderedItems[0].status === 'Pending' ? 'warning' : order.orderedItems[0].status === 'Cancelled' ? 'danger' : 'primary' %>"
                        >
                          <%= order.orderedItems[0].status %>
                        </span>
                      </td>
                      <td>â‚¹<%= order.FinalAmount.toLocaleString('en-IN') %></td>
                    </tr>
                    <% }); %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Initialize Charts -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
      try {
          // Add this function to group data by year
          function groupDataByYear(labels, orders, revenue) {
              const yearlyData = {};

              // Convert month-year labels to corresponding data by year
              labels.forEach((label, index) => {
                  const year = label.split(' ')[1];
                  if (!yearlyData[year]) {
                      yearlyData[year] = {
                          orders: 0,
                          revenue: 0
                      };
                  }
                  yearlyData[year].orders += orders[index];
                  yearlyData[year].revenue += revenue[index];
              });

              // Convert to arrays
              const years = Object.keys(yearlyData).sort();
              return {
                  labels: years,
                  orders: years.map(year => yearlyData[year].orders),
                  revenue: years.map(year => yearlyData[year].revenue)
              };
          }

          const ctx = document.getElementById('ordersChart').getContext('2d');
          let chart = null;

          function renderChart(labels, orders, revenue) {
              if (chart) {
                  chart.destroy();
              }

              chart = new Chart(ctx, {
                  type: 'line',
                  data: {
                      labels: labels,
                      datasets: [{
                          label: 'Orders',
                          data: orders,
                          borderColor: '#6366f1',
                          backgroundColor: 'rgba(99, 102, 241, 0.1)',
                          fill: true,
                          tension: 0.4,
                          yAxisID: 'y',
                          borderWidth: 2,
                          pointRadius: 4,
                          pointHoverRadius: 6,
                          pointBackgroundColor: '#ffffff',
                          pointHoverBackgroundColor: '#6366f1',
                          pointBorderColor: '#6366f1',
                          pointBorderWidth: 2
                      }, {
                          label: 'Revenue',
                          data: revenue,
                          borderColor: '#10b981',
                          backgroundColor: 'rgba(16, 185, 129, 0.1)',
                          fill: true,
                          tension: 0.4,
                          yAxisID: 'y1',
                          borderWidth: 2,
                          pointRadius: 4,
                          pointHoverRadius: 6,
                          pointBackgroundColor: '#ffffff',
                          pointHoverBackgroundColor: '#10b981',
                          pointBorderColor: '#10b981',
                          pointBorderWidth: 2
                      }]
                  },
                  options: {
                      responsive: true,
                      maintainAspectRatio: false,
                      interaction: {
                          intersect: false,
                          mode: 'index'
                      },
                      plugins: {
                          legend: {
                              position: 'top',
                              align: 'end',
                              labels: {
                                  usePointStyle: true,
                                  padding: 20,
                                  font: {
                                      family: "'Inter', sans-serif",
                                      size: 12,
                                      weight: '500'
                                  },
                                  boxWidth: 8
                              }
                          },
                          tooltip: {
                              backgroundColor: 'white',
                              titleColor: '#1e293b',
                              bodyColor: '#64748b',
                              borderColor: '#e2e8f0',
                              borderWidth: 1,
                              padding: 12,
                              bodySpacing: 6,
                              bodyFont: {
                                  family: "'Inter', sans-serif",
                                  size: 12
                              },
                              titleFont: {
                                  family: "'Inter', sans-serif",
                                  size: 13,
                                  weight: '600'
                              },
                              boxPadding: 4,
                              usePointStyle: true,
                              callbacks: {
                                  label: function(context) {
                                      let label = context.dataset.label || '';
                                      if (label) {
                                          label += ': ';
                                      }
                                      if (context.dataset.label === 'Revenue') {
                                          label += 'â‚¹' + context.parsed.y.toLocaleString('en-IN');
                                      } else {
                                          label += context.parsed.y;
                                      }
                                      return label;
                                  }
                              }
                          }
                      },
                      scales: {
                          x: {
                              grid: {
                                  display: false
                              },
                              ticks: {
                                  font: {
                                      family: "'Inter', sans-serif",
                                      size: 12
                                  },
                                  color: '#64748b'
                              }
                          },
                          y: {
                              beginAtZero: true,
                              position: 'left',
                              grid: {
                                  color: '#e2e8f0',
                                  drawBorder: false
                              },
                              ticks: {
                                  font: {
                                      family: "'Inter', sans-serif",
                                      size: 12
                                  },
                                  color: '#64748b',
                                  padding: 8
                              }
                          },
                          y1: {
                              beginAtZero: true,
                              position: 'right',
                              grid: {
                                  display: false
                              },
                              ticks: {
                                  font: {
                                      family: "'Inter', sans-serif",
                                      size: 12
                                  },
                                  color: '#64748b',
                                  padding: 8
                              }
                          }
                      }
                  }
              });
          }

          function updateOrdersTable(orders) {
              const tbody = document.getElementById('ordersTableBody');
              tbody.innerHTML = orders.map(order => `
                  <tr>
                      <td>${order.orderId}</td>
                      <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                      <td>${order.userId.name}</td>
                      <td>
                          <span class="badge bg-${
                              order.orderedItems[0].status === 'Delivered' ? 'success' :
                              order.orderedItems[0].status === 'Pending' ? 'warning' :
                              order.orderedItems[0].status === 'Cancelled' ? 'danger' : 'primary'
                          }">
                              ${order.orderedItems[0].status}
                          </span>
                      </td>
                      <td>â‚¹${order.FinalAmount.toLocaleString('en-IN')}</td>
                  </tr>
              `).join('');
          }

          function updateStatsAndTable(revenue, orders, ordersToShow) {
              // Update revenue stat with null check
              const totalRevenue = Array.isArray(revenue) ?
                  revenue.reduce((a, b) => a + Number(b || 0), 0) : 0;
              document.getElementById('revenueStat').textContent =
                  `â‚¹${totalRevenue.toLocaleString('en-IN')}`;

              // Update orders stat with null check
              const totalOrders = Array.isArray(orders) ?
                  orders.reduce((a, b) => a + Number(b || 0), 0) : 0;
              document.getElementById('ordersStat').textContent = totalOrders;

              // Update orders table
              const tbody = document.getElementById('ordersTableBody');
              if (!ordersToShow || ordersToShow.length === 0) {
                  tbody.innerHTML = '<tr><td colspan="5" class="text-center">No orders found</td></tr>';
                  return;
              }

              tbody.innerHTML = ordersToShow.slice(0, 5).map(order => `
                  <tr>
                      <td>${order.orderId || 'N/A'}</td>
                      <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                      <td>${order.userId?.name || 'N/A'}</td>
                      <td>
                          <span class="badge bg-${
                              order.orderedItems?.[0]?.status === 'Delivered' ? 'success' :
                              order.orderedItems?.[0]?.status === 'Pending' ? 'warning' :
                              order.orderedItems?.[0]?.status === 'Cancelled' ? 'danger' : 'primary'
                          }">
                              ${order.orderedItems?.[0]?.status || 'N/A'}
                          </span>
                      </td>
                      <td>â‚¹${(order.FinalAmount || 0).toLocaleString('en-IN')}</td>
                  </tr>
              `).join('');
          }

          function updateDownloadButtons(hasData = false) {
              document.getElementById('excelBtn').disabled = !hasData;
              document.getElementById('pdfBtn').disabled = !hasData;
          }

          // Click handler for view changes
          document.querySelectorAll('.dropdown-item').forEach(item => {
              item.addEventListener('click', async function(e) {
                  e.preventDefault();
                  const range = this.dataset.range;
                  const dateRangePicker = document.getElementById('dateRangePicker');
                  const dropdownButton = document.getElementById('timeRangeDropdown');

                  // Update active state
                  document.querySelectorAll('.dropdown-item').forEach(item => {
                      item.classList.remove('active');
                  });
                  this.classList.add('active');

                  if (range === 'custom') {
                      dateRangePicker.classList.remove('d-none');
                      dropdownButton.textContent = 'Custom Range';
                      updateDownloadButtons(false);
                  } else {
                      dateRangePicker.classList.add('d-none');
                      // Update dropdown button text based on selection
                      const viewText = this.textContent.trim();
                      dropdownButton.textContent = viewText;

                      // Rest of your existing switch case code...
                      let labels, orders, revenue, ordersToShow;
                      switch(range) {
                          case 'today':
                              labels = <%- todayLabels %>;
                              orders = <%- todayData %>;
                              revenue = <%- todayRevenue %>;
                              ordersToShow = <%- todaysOrders %>;
                              break;
                          case 'yearly':
                              const yearlyData = groupDataByYear(<%- orderChartLabels %>, <%- orderChartData %>, <%- orderChartRevenue %>);
                              labels = yearlyData.labels;
                              orders = yearlyData.orders;
                              revenue = yearlyData.revenue;
                              ordersToShow = <%- monthlyOrdersList %>; // Use monthly for yearly view
                              break;
                          case 'monthly':
                              labels = <%- orderChartLabels %>;
                              orders = <%- orderChartData %>;
                              revenue = <%- orderChartRevenue %>;
                              ordersToShow = <%- monthlyOrdersList %>;
                              break;
                          case 'weekly':
                              labels = <%- weeklyLabels %>;
                              orders = <%- weeklyData %>;
                              revenue = <%- weeklyRevenue %>;
                              ordersToShow = <%- weeklyOrdersList %>;
                              break;
                      }

                      // Render the chart with selected data
                      renderChart(labels, orders, revenue);
                      updateStatsAndTable(revenue, orders, ordersToShow);
                      // Enable/disable buttons based on data availability
                      updateDownloadButtons(ordersToShow && ordersToShow.length > 0);

                      // After updating the main chart and table, update the additional charts
                      const response = await fetch(`/admin/chart-stats?range=${range}`);
                      const statsData = await response.json();
                      if (statsData.success) {
                          updateSecondaryCharts(statsData);
                      }
                  }
              });
          });

          async function applyDateRange() {
              const startDate = document.getElementById('startDate').value;
              const endDate = document.getElementById('endDate').value;

              if (!startDate || !endDate) {
                  alert('Please select both start and end dates');
                  return;
              }

              if (new Date(endDate) < new Date(startDate)) {
                  alert('End date must be after start date');
                  return;
              }

              try {
                  // Fetch data for the custom date range
                  const response = await fetch(`/admin/custom-range-data?start=${startDate}&end=${endDate}`);
                  const data = await response.json();

                  if (response.ok && data.success) {
                      // Update stats
                      document.getElementById('revenueStat').textContent =
                          `â‚¹${data.stats.totalRevenue.toLocaleString('en-IN')}`;
                      document.getElementById('ordersStat').textContent =
                          data.stats.totalOrders;

                      // Update chart
                      renderChart(data.chartData.labels, data.chartData.orders, data.chartData.revenue);

                      // Update orders table
                      const tbody = document.getElementById('ordersTableBody');
                      if (data.orders.length === 0) {
                          tbody.innerHTML = '<tr><td colspan="5" class="text-center">No orders found for selected period</td></tr>';
                      } else {
                          tbody.innerHTML = data.orders.map(order => `
                              <tr>
                                  <td>${order.orderId}</td>
                                  <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                                  <td>${order.userId?.name || 'N/A'}</td>
                                  <td>
                                      <span class="badge bg-${
                                          order.orderedItems[0]?.status === 'Delivered' ? 'success' :
                                          order.orderedItems[0]?.status === 'Pending' ? 'warning' :
                                          order.orderedItems[0]?.status === 'Cancelled' ? 'danger' : 'primary'
                                      }">
                                          ${order.orderedItems[0]?.status || 'N/A'}
                                      </span>
                                  </td>
                                  <td>â‚¹${(order.FinalAmount || 0).toLocaleString('en-IN')}</td>
                              </tr>
                          `).join('');
                      }

                      // Update dropdown button text
                      document.getElementById('timeRangeDropdown').textContent =
                          `${new Date(startDate).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`;

                      // Enable/disable download buttons based on data
                      updateDownloadButtons(data.orders && data.orders.length > 0);

                      // Update the additional charts with the custom range data
                      const statsResponse = await fetch(`/admin/chart-stats?range=custom&start=${startDate}&end=${endDate}`);
                      const statsData = await statsResponse.json();
                      if (statsData.success) {
                          updateSecondaryCharts(statsData);
                      }
                  } else {
                      alert('Failed to fetch data for selected date range');
                      updateDownloadButtons(false);
                  }
              } catch (error) {
                  console.error('Error fetching custom range data:', error);
                  alert('Error fetching data for selected date range');
                  updateDownloadButtons(false);
              }
          }

          // Make applyDateRange available globally
          window.applyDateRange = applyDateRange;

          // Make downloadReport function globally available
          window.downloadReport = function(type) {
              const dropdownText = document.getElementById('timeRangeDropdown').textContent;
              try {
                  if (dropdownText.includes(' - ')) { // Custom date range
                      const startDate = document.getElementById('startDate').value;
                      const endDate = document.getElementById('endDate').value;
                      if (!startDate || !endDate) {
                          alert('Please select both start and end dates');
                          return;
                      }
                      window.location.href = `/admin/download-report?type=${type}&range=custom&start=${startDate}&end=${endDate}`;
                  } else {
                      // Remove 'View' from the end and send
                      const range = dropdownText.replace(/\s+View$/, '').trim();
                      window.location.href = `/admin/download-report?type=${type}&range=${range}`;
                  }
              } catch (error) {
                  console.error('Download error:', error);
                  alert('Error generating report. Please try again.');
              }
          };

          // Initial render with weekly data
          renderChart(<%- weeklyLabels %>, <%- weeklyData %>, <%- weeklyRevenue %>);
          updateStatsAndTable(<%- weeklyRevenue %>, <%- weeklyData %>, <%- weeklyOrdersList %>);
          // Initial state - enable/disable based on weekly data
          updateDownloadButtons(<%- weeklyOrdersList %> && <%- weeklyOrdersList %>.length > 0);

          // Payment Methods Chart initialization
          const paymentCtx = document.getElementById('paymentMethodsChart').getContext('2d');
          const paymentData = {
              cod: <%= paymentStats.COD || 0 %>,
              online: <%= paymentStats.Online || 0 %>,
              wallet: <%= paymentStats.Wallet || 0 %>
          };

          // Check if there's any payment data
          const totalPayments = paymentData.cod + paymentData.online + paymentData.wallet;

          let paymentChart;

          if (totalPayments === 0) {
              // Show empty state with message
              paymentChart = new Chart(paymentCtx, {
                  type: 'doughnut',
                  data: {
                      labels: ['No Data'],
                      datasets: [{
                          data: [1],
                          backgroundColor: ['#f1f5f9'],
                          borderWidth: 0
                      }]
                  },
                  options: {
                      responsive: true,
                      maintainAspectRatio: false,
                      cutout: '60%',
                      plugins: {
                          legend: {
                              display: false
                          },
                          tooltip: {
                              enabled: false
                          }
                      }
                  },
                  plugins: [{
                      id: 'emptyState',
                      afterDraw: (chart) => {
                          const { ctx, width, height } = chart;
                          ctx.save();
                          ctx.textAlign = 'center';
                          ctx.textBaseline = 'middle';
                          ctx.font = '14px Inter';
                          ctx.fillStyle = '#64748b';
                          ctx.fillText('No payment data available', width / 2, height / 2);
                          ctx.restore();
                      }
                  }]
              });
          } else {
              // Show actual payment data
              paymentChart = new Chart(paymentCtx, {
                  type: 'doughnut',
                  data: {
                      labels: ['COD', 'Online', 'Wallet'],
                      datasets: [{
                          data: [paymentData.cod, paymentData.online, paymentData.wallet],
                          backgroundColor: ['#4f46e5', '#10b981', '#f59e0b'],
                          borderWidth: 2,
                          borderColor: '#ffffff'
                      }]
                  },
                  options: {
                      responsive: true,
                      maintainAspectRatio: false,
                      cutout: '60%',
                      plugins: {
                          legend: {
                              position: 'bottom',
                              display: true,
                              labels: {
                                  color: '#64748b',
                                  padding: 10,
                                  usePointStyle: true,
                                  font: {
                                      family: "'Inter', sans-serif",
                                      size: 12
                                  }
                              }
                          },
                          tooltip: {
                              backgroundColor: 'white',
                              titleColor: '#1e293b',
                              bodyColor: '#64748b',
                              borderColor: '#e2e8f0',
                              borderWidth: 1,
                              padding: 12,
                              callbacks: {
                                  label: function(context) {
                                      const value = context.raw;
                                      const percentage = ((value / totalPayments) * 100).toFixed(1);
                                      return `${context.label}: ${value} (${percentage}%)`;
                                  }
                              }
                          }
                      }
                  }
              });
          }

          // Updated Order Status Chart
          const statusCtx = document.getElementById('orderStatusChart').getContext('2d');
          let statusChart = new Chart(statusCtx, {
              type: 'bar',
              data: {
                  labels: [
                      'Delivered',
                      'Pending',
                      'Processing',
                      'Shipped',
                      'Cancelled',
                      'Return Request',
                      'Return Approved',
                      'Return Rejected',
                      'Returned'
                  ],
                  datasets: [{
                      label: 'Orders',
                      data: [
                          <%= salesStats.deliveredOrders || 0 %>,
                          <%= salesStats.pendingOrders || 0 %>,
                          <%= salesStats.processingOrders || 0 %>,
                          <%= salesStats.shippedOrders || 0 %>,
                          <%= salesStats.cancelledOrders || 0 %>,
                          <%= salesStats.returnRequestedOrders || 0 %>,
                          <%= salesStats.returnApprovedOrders || 0 %>,
                          <%= salesStats.returnRejectedOrders || 0 %>,
                          <%= salesStats.returnedOrders || 0 %>
                      ],
                      backgroundColor: [
                          '#10b981', // Delivered - Green
                          '#f59e0b', // Pending - Orange
                          '#3b82f6', // Processing - Blue
                          '#6366f1', // Shipped - Indigo
                          '#ef4444', // Cancelled - Red
                          '#8b5cf6', // Return Request - Purple
                          '#14b8a6', // Return Approved - Teal
                          '#f43f5e', // Return Rejected - Rose
                          '#64748b'  // Returned - Gray
                      ],
                      borderRadius: 8,
                      borderWidth: 0
                  }]
              },
              options: {
                  responsive: true,
                  maintainAspectRatio: false,
                  indexAxis: 'y',
                  plugins: {
                      legend: {
                          display: false
                      },
                      tooltip: {
                          backgroundColor: 'white',
                          titleColor: '#1e293b',
                          bodyColor: '#64748b',
                          borderColor: '#e2e8f0',
                          borderWidth: 1,
                          padding: 12,
                          displayColors: true,
                          callbacks: {
                              label: function(context) {
                                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                  const value = context.raw || 0;
                                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : '0.0';
                                  return `Orders: ${value} (${percentage}%)`;
                              }
                          }
                      }
                  },
                  scales: {
                      y: {
                          beginAtZero: true,
                          grid: {
                              display: false
                          },
                          ticks: {
                              font: {
                                  family: "'Inter', sans-serif",
                                  size: 12
                              }
                          }
                      },
                      x: {
                          beginAtZero: true, // Add this
                          min: 0, // Add this
                          grid: {
                              color: '#e2e8f0'
                          },
                          ticks: {
                              font: {
                                  family: "'Inter', sans-serif",
                                  size: 12
                              }
                          }
                      }
                  }
              }
          });

          function updateSecondaryCharts(data) {
              // Update payment methods chart
              if (paymentChart) {
                  const newPaymentData = {
                      cod: data.paymentStats.COD || 0,
                      online: data.paymentStats.Online || 0,
                      wallet: data.paymentStats.Wallet || 0
                  };
                  
                  const newTotalPayments = newPaymentData.cod + newPaymentData.online + newPaymentData.wallet;

                  // Destroy existing chart
                  paymentChart.destroy();

                  // Recreate chart based on new data
                  if (newTotalPayments === 0) {
                      paymentChart = new Chart(paymentCtx, {
                          type: 'doughnut',
                          data: {
                              labels: ['No Data'],
                              datasets: [{
                                  data: [1],
                                  backgroundColor: ['#f1f5f9'],
                                  borderWidth: 0
                              }]
                          },
                          options: {
                              responsive: true,
                              maintainAspectRatio: false,
                              cutout: '60%',
                              plugins: {
                                  legend: {
                                      display: false
                                  },
                                  tooltip: {
                                      enabled: false
                                  }
                              }
                          },
                          plugins: [{
                              id: 'emptyState',
                              afterDraw: (chart) => {
                                  const { ctx, width, height } = chart;
                                  ctx.save();
                                  ctx.textAlign = 'center';
                                  ctx.textBaseline = 'middle';
                                  ctx.font = '14px Inter';
                                  ctx.fillStyle = '#64748b';
                                  ctx.fillText('No payment data available', width / 2, height / 2);
                                  ctx.restore();
                              }
                          }]
                      });
                  } else {
                      paymentChart = new Chart(paymentCtx, {
                          type: 'doughnut',
                          data: {
                              labels: ['COD', 'Online', 'Wallet'],
                              datasets: [{
                                  data: [newPaymentData.cod, newPaymentData.online, newPaymentData.wallet],
                                  backgroundColor: ['#4f46e5', '#10b981', '#f59e0b'],
                                  borderWidth: 2,
                                  borderColor: '#ffffff'
                              }]
                          },
                          options: {
                              responsive: true,
                              maintainAspectRatio: false,
                              cutout: '60%',
                              plugins: {
                                  legend: {
                                      position: 'bottom',
                                      display: true,
                                      labels: {
                                          color: '#64748b',
                                          padding: 10,
                                          usePointStyle: true,
                                          font: {
                                              family: "'Inter', sans-serif",
                                              size: 12
                                          }
                                      }
                                  },
                                  tooltip: {
                                      backgroundColor: 'white',
                                      titleColor: '#1e293b',
                                      bodyColor: '#64748b',
                                      borderColor: '#e2e8f0',
                                      borderWidth: 1,
                                      padding: 12,
                                      callbacks: {
                                          label: function(context) {
                                              const value = context.raw;
                                              const percentage = ((value / newTotalPayments) * 100).toFixed(1);
                                              return `${context.label}: ${value} (${percentage}%)`;
                                          }
                                      }
                                  }
                              }
                          }
                      });
                  }
              }

              // Update order status chart
              if (statusChart) {
                  const statusData = [
                      data.salesStats.deliveredOrders || 0,
                      data.salesStats.pendingOrders || 0,
                      data.salesStats.processingOrders || 0,
                      data.salesStats.shippedOrders || 0, 
                      data.salesStats.cancelledOrders || 0,
                      data.salesStats.returnRequestedOrders || 0,
                      data.salesStats.returnApprovedOrders || 0,
                      data.salesStats.returnRejectedOrders || 0,
                      data.salesStats.returnedOrders || 0
                  ];

                  statusChart.data.datasets[0].data = statusData;
                  statusChart.update();
              }
          }

      } catch (error) {
          console.error('Chart Error:', error);
          updateDownloadButtons(false);
      }
  });
</script>

<!-- Custom JS -->
<script src="/scripts/user/login.js"></script>

<%- include('../../views/layout/admin/footer.ejs')%>
