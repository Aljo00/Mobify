<%- include('../../views/layout/header.ejs') %>

<!-- Bootstrap CSS -->
<link
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
  rel="stylesheet"
/>
<!-- Font Awesome -->
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
/>
<!-- Custom CSS -->
<link rel="stylesheet" href="/styles/user/checkOut.css" />

<div class="minimal-header">
  <div class="header-content">
    <h1>Checkout</h1>
    <nav class="minimal-breadcrumb">
      <a href="/">Home</a>
      <span class="separator">/</span>
      <a href="/cart">Cart</a>
      <span class="separator">/</span>
      <span class="current">Checkout</span>
    </nav>
  </div>
</div>

<div class="checkout-wrapper">
  <div class="checkout-main">
    <form
      class="checkout-form"
      action="/place-order"
      method="post"
      id="checkoutForm"
    >
      <div class="glass-card address-section">
        <h2>
          <i class="fas fa-map-marker-alt pulse"></i> Select Delivery Address
        </h2>
        <div class="address-grid">
          <% addresses.forEach((address, index) => { %> <%
          address.address.forEach((addr, addrIndex) => { %>
          <div
            class="address-card"
            onclick="selectAddress('<%= index %>-<%= addrIndex %>')"
          >
            <div class="card-content">
              <div class="address-type-badge"><%= addr.addressType %></div>
              <input
                type="radio"
                id="address<%= index %>-<%= addrIndex %>"
                name="selectedAddress"
                value="<%= addr._id %>"
                class="hidden-radio"
              />
              <div class="address-info">
                <h4><%= addr.houseName %></h4>
                <p>
                  <i class="fas fa-map-pin"></i> <%= addr.city %>, <%=
                  addr.state %>
                </p>
                <p><i class="fas fa-hashtag"></i> <%= addr.pincode %></p>
                <p><i class="fas fa-phone"></i> <%= addr.phone %></p>
                <p><i class="fas fa-phone-alt"></i> <%= addr.altPhone %></p>
              </div>
              <div class="card-actions">
                <button
                  type="button"
                  class="btn-edit"
                  onclick="window.location.href='/edit-address/<%= addr._id %>'"
                >
                  <i class="fas fa-edit"></i> Edit
                </button>
                <button
                  type="button"
                  class="btn-delete"
                  onclick="deleteAddress('<%= addr._id %>')"
                >
                  <i class="fas fa-trash"></i> Delete
                </button>
              </div>
            </div>
          </div>
          <% }) %> <% }) %>
        </div>
      </div>

      <div class="glass-card payment-section">
        <h2><i class="fas fa-wallet bounce"></i> Payment Method</h2>
        <div class="payment-options">
          <label class="payment-option">
            <input type="radio" name="paymentMethod" value="cod" />
            <span class="option-content">
              <i class="fas fa-money-bill-wave"></i>
              <div class="option-text">
                <span>Cash on Delivery</span>
                <small>Pay when you receive</small>
              </div>
            </span>
          </label>

          <label class="payment-option">
            <input type="radio" name="paymentMethod" value="razorpay" />
            <span class="option-content">
              <i class="fas fa-credit-card"></i>
              <div class="option-text">
                <span>Razorpay</span>
                <small>Cards, UPI, NetBanking</small>
              </div>
            </span>
          </label>

          <label class="payment-option">
            <input type="radio" name="paymentMethod" value="wallet" />
            <span class="option-content">
              <i class="fas fa-wallet"></i>
              <div class="option-text">
                <span>Wallet</span>
                <small>Available balance</small>
              </div>
            </span>
          </label>
        </div>
      </div>
    </form>
  </div>

  <div class="checkout-sidebar">
    <div class="coupon-section">
      <div class="coupon-header">
        <h3><i class="fas fa-tags"></i> Save on your order</h3>
        <p class="coupon-description">
          Apply a promo code or view available offers
        </p>
      </div>
      <div class="available-coupons">
        <a href="javascript:void(0)" onclick="showAvailableCoupons()">
          <i class="fas fa-ticket-alt"></i>
          <div class="offer-text">
            <span>View Available Offers</span>
            <small>Save up to 20% on your purchase</small>
          </div>
          <i class="fas fa-chevron-right show-more"></i>
        </a>
      </div>
      <div class="coupon-input">
        <input
          type="text"
          id="couponCode"
          placeholder="Enter promo code"
          class="coupon-field"
        />
        <button
          type="button"
          class="apply-coupon"
          onclick="handleApplyCoupon()"
        >
          Apply
        </button>
      </div>
    </div>

    <div class="glass-card order-summary">
      <div class="summary-header">
        <h2><i class="fas fa-shopping-bag swing"></i> Order Summary</h2>
        <button type="button" class="toggle-cart" id="toggleCart">
          <i class="fas fa-chevron-up"></i>
        </button>
      </div>

      <div class="cart-content" id="cartContent">
        <div class="items-count">
          <%= cart.items.filter(item => item.quantity > 0).length %> items in
          cart
        </div>

        <div class="cart-items">
          <% cart.items.filter(item => item.quantity > 0).forEach(item => { %>
          <div class="cart-item">
            <div class="item-image">
              <img
                src="<%= item.ProductId.productImage[0] %>"
                alt="<%= item.ProductId.productName %>"
              />
              <span class="item-quantity"><%= item.quantity %></span>
            </div>
            <div class="item-details">
              <h6><%= item.ProductId.productName %></h6>
              <div class="item-meta">
                <span class="price">₹<%= item.totalPrice %></span>
                <span class="unit-price">₹<%= item.price %> each</span>
              </div>
            </div>
          </div>
          <% }) %>
        </div>

        <div class="price-breakdown">
          <div class="price-row">
            <span>Subtotal</span>
            <span
              >₹<%= cart.items.filter(item => item.quantity > 0).reduce((acc,
              item) => acc + item.totalPrice, 0) %></span
            >
          </div>
          <div class="price-row">
            <span>Shipping</span>
            <span class="free-shipping">FREE</span>
          </div>
          <div class="price-row total">
            <span>Total</span>
            <span class="total-amount"
              >₹<%= cart.items.filter(item => item.quantity > 0).reduce((acc,
              item) => acc + item.totalPrice, 0) %></span
            >
          </div>
        </div>

        <button
          class="submit-order pulse-button"
          type="submit"
          form="checkoutForm"
        >
          <i class="fas fa-lock"></i> Place Order Securely
        </button>
      </div>
    </div>
  </div>
</div>

<div class="mobile-action-bar">
  <div class="mobile-total">
    <span>Total:</span>
    <span class="total-amount"
      >₹<%= cart.items.filter(item => item.quantity > 0).reduce((acc, item) =>
      acc + item.totalPrice, 0) %></span
    >
  </div>
  <button class="submit-order" type="submit" form="checkoutForm">
    <i class="fas fa-lock"></i> Place Order
  </button>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
            document
              .getElementById("checkoutForm")
              .addEventListener("submit", async function (event) {
                event.preventDefault();

                const form = this;
                const formData = new FormData(form);
                const paymentMethod = formData.get('paymentMethod');

                try {
                  const response = await fetch(form.action, {
                    method: "POST",
                    body: formData,
                  });

                  const data = await response.json();
                  console.log("Response from backend:", data);

                  if (data.success) {
                    if (paymentMethod === 'razorpay' && data.order) {
                      // Handle Razorpay payment
                      const options = {
                        key: '<%= process.env.RAZARPAY_API_KEY_ID %>', // Add this to your EJS template
                        amount: data.order.amount,
                        currency: data.order.currency,
                        name: 'Your Store Name',
                        description: 'Purchase Order',
                        order_id: data.order.id,
                        handler: async function (response) {
                          try {
                            // Verify the payment
                            const verificationResponse = await fetch('/verify-razorpay-payment', {
                              method: 'POST',
                              headers: {
                                'Content-Type': 'application/json',
                              },
                              body: JSON.stringify({
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature,
                                orderId: data.orderId
                              })
                            });

                            const verificationResult = await verificationResponse.json();

                            if (verificationResult.success) {
                              window.location.href = verificationResult.redirectUrl;
                            } else {
                              throw new Error(verificationResult.message);
                            }
                          } catch (error) {
                            Swal.fire({
                              icon: 'error',
                              title: 'Payment Verification Failed',
                              text: error.message || 'Please try again',
                            });
                          }
                        },
                        modal: {
                          ondismiss: function() {
                            // Redirect to order-success with query params
                            window.location.href = `/order-success?id=${data.orderId}`;
                          }
                        },
                        prefill: {
                          name: '<%= user.name %>',
                          email: '<%= user.email %>',
                          contact: '<%= user.phone %>'
                        },
                        theme: {
                          color: '#3399cc'
                        }
                      };

                      const rzp = new Razorpay(options);
                      rzp.open();

                    } else {
                      // Handle other payment methods
                      window.location.href = data.redirectUrl;
                    }
                  } else {
                    Swal.fire({
                      toast: true,
                      position: "top-end",
                      icon: "error",
                      title: "Error!",
                      text: data.message || "Failed to place the order. Please try again.",
                      showConfirmButton: false,
                      timer: 3000,
                      timerProgressBar: true,
                      customClass: {
                        popup: "colored-toast error-toast",
                        icon: "error-icon",
                      },
                    });
                  }
                } catch (error) {
                  console.error("Error:", error);
                  Swal.fire({
                    toast: true,
                    position: "top-end",
                    icon: "error",
                    title: "Error!",
                    text: "An error occurred. Please try again.",
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                  });
                }
              });

            function toggleAddressActions(radio) {
              document.querySelectorAll(".address-actions").forEach((action) => {
                action.style.display = "none";
              });
              if (radio.checked) {
                radio
                  .closest(".card-body")
                  .querySelector(".address-actions").style.display = "flex";
              }
            }

            function selectAddress(id) {
              const radio = document.getElementById("address" + id);
              radio.checked = true;
              toggleAddressActions(radio);
            }

            // Initialize the display for the initially checked address
            document.addEventListener("DOMContentLoaded", () => {
              const checkedRadio = document.querySelector(
                'input[name="selectedAddress"]:checked'
              );
              if (checkedRadio) {
                toggleAddressActions(checkedRadio);
              }
            });

            // Toggle cart summary on mobile
            document.getElementById("toggleCart").addEventListener("click", function () {
              const cartContent = document.getElementById("cartContent");
              const icon = this.querySelector("i");

              cartContent.classList.toggle("collapsed");
              icon.classList.toggle("fa-chevron-up");
              icon.classList.toggle("fa-chevron-down");
            });

            // Add this function before the existing showAvailableCoupons function
            async function applyCoupon(code) {
              try {
                  // If code is not passed as parameter, get it from input field
                  if (!code) {
                      code = document.getElementById('couponCode').value;
                  }

                  if (!code) {
                      Swal.fire({
                          icon: 'warning',
                          title: 'Please enter a coupon code',
                          toast: true,
                          position: 'top-end',
                          showConfirmButton: false,
                          timer: 3000
                      });
                      return;
                  }

                  const totalAmount = <%= cart.items.filter(item => item.quantity > 0).reduce((acc, item) => acc + item.totalPrice, 0) %>;

                  const response = await fetch('/api/validate-coupon', {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify({
                          code: code,
                          cartTotal: totalAmount
                      })
                  });

                  const data = await response.json();

                  if (data.status === 'success') {
                      // Calculate new total
                      const newTotal = totalAmount - data.discount;

                      // Update all total amount displays
                      document.querySelectorAll('.total-amount').forEach(el => {
                          el.textContent = `₹${newTotal}`;
                      });

                      // Add discount row to price breakdown
                      const priceBreakdown = document.querySelector('.price-breakdown');
                      const discountRow = document.createElement('div');
                      discountRow.className = 'price-row discount';
                      discountRow.innerHTML = `
                          <span>Discount (${code})</span>
                          <span class="discount-amount" style="color: #28a745">-₹${data.discount}</span>
                      `;

                      // Insert discount row before total
                      const totalRow = priceBreakdown.querySelector('.price-row.total');
                      priceBreakdown.insertBefore(discountRow, totalRow);

                      // Show success message
                      Swal.fire({
                          icon: 'success',
                          title: 'Coupon Applied!',
                          text: `Saved ₹${data.discount} on your order`,
                          toast: true,
                          position: 'top-end',
                          showConfirmButton: false,
                          timer: 3000
                      });

                      // Close the coupon modal if it's open
                      if (Swal.isVisible()) {
                          Swal.close();
                      }

                      // Clear the coupon input
                      document.getElementById('couponCode').value = '';

                  } else {
                      Swal.fire({
                          icon: 'error',
                          title: 'Oops...',
                          text: data.message,
                          toast: true,
                          position: 'top-end',
                          showConfirmButton: false,
                          timer: 3000
                      });
                  }
              } catch (error) {
                  console.error('Error:', error);
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: 'Failed to apply coupon. Please try again.',
                      toast: true,
                      position: 'top-end',
                      showConfirmButton: false,
                      timer: 3000
                  });
              }
          }

            // Replace the existing showAvailableCoupons function
            async function showAvailableCoupons() {
              try {
                  const totalAmount = <%= cart.items.filter(item => item.quantity > 0).reduce((acc, item) => acc + item.totalPrice, 0) %>;
                  const response = await fetch(`/api/available-coupons?total=${totalAmount}`);
                  const data = await response.json();

                  let content;
                  if (data.status === "success" && data.coupons && data.coupons.length > 0) {
                      content = `
                          <div class="modern-coupon-container">
                              ${data.coupons.map(coupon => `
                                  <div class="modern-coupon-item">
                                      <div class="coupon-left-part" style="background: linear-gradient(135deg, #2193b0, #6dd5ed);">
                                          <div class="discount-circle">
                                              <span class="discount-amount">${coupon.savings}</span>
                                          </div>
                                      </div>
                                      <div class="coupon-details">
                                          <div class="coupon-header">
                                              <div class="coupon-title">
                                                  <div class="code-container">
                                                      <h4 class="coupon-code">${coupon.code}</h4>
                                                      <button onclick="event.stopPropagation(); copyAndApply('${coupon.code}')" class="copy-code-btn" title="Copy Code">
                                                          <i class="fas fa-copy"></i>
                                                      </button>
                                                  </div>
                                                  <span class="validity">Valid till ${new Date(coupon.expiry).toLocaleDateString()}</span>
                                              </div>
                                              <div class="savings-badge">
                                                  Save ${coupon.savings}
                                              </div>
                                          </div>
                                          <p class="coupon-description">${coupon.description}</p>
                                          <div class="coupon-footer">
                                              <span class="uses-left">Uses left: ${coupon.usesLeft}</span>
                                          </div>
                                      </div>
                                  </div>
                              `).join('')}
                          </div>`;
                  } else {
                      content = `
                          <div class="no-coupons-message">
                              <div class="no-coupons-icon">
                                  <i class="fas fa-ticket-alt"></i>
                              </div>
                              <h3>No Coupons Available</h3>
                              <p>Sorry, there are no active coupons available for your cart value at this moment.</p>
                          </div>`;
                  }

                  await Swal.fire({
                      title: '<div class="coupon-popup-header"><i class="fas fa-ticket-alt"></i> Available Offers</div>',
                      html: content,
                      showCloseButton: true,
                      showConfirmButton: false,
                      width: '600px',
                      customClass: {
                          popup: 'modern-coupon-popup',
                          closeButton: 'modern-close-button'
                      }
                  });
              } catch (error) {
                  console.error('Error:', error);
                  Swal.fire({
                      icon: 'error',
                      title: 'Oops...',
                      text: 'Failed to fetch coupons. Please try again.'
                  });
              }
          }

        function copyCode(code) {
            navigator.clipboard.writeText(code).then(() => {
                // Update input field
                document.getElementById('couponCode').value = code;

                // Show success message
                Swal.fire({
                    icon: 'success',
                    title: 'Code Copied!',
                    text: 'Paste the code in the coupon field and click Apply',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 2000
                });
            }).catch(err => {
                console.error('Failed to copy code:', err);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Failed to copy code',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 2000
                });
            });
        }

        // ...existing code...

        // First, define all functions in the global scope
      window.showAvailableCoupons = async function() {
          try {
              const totalAmount = <%= cart.items.filter(item => item.quantity > 0).reduce((acc, item) => acc + item.totalPrice, 0) %>;
              const response = await fetch(`/api/available-coupons?total=${totalAmount}`);
              const data = await response.json();

              let content;
              if (data.status === "success" && data.coupons && data.coupons.length > 0) {
                  content = `
                      <div class="modern-coupon-container">
                          ${data.coupons.map(coupon => `
                              <div class="modern-coupon-item">
                                  <div class="coupon-left-part" style="background: linear-gradient(135deg, #2193b0, #6dd5ed);">
                                      <div class="discount-circle">
                                          <div class="discount-amount">${coupon.savings}</div>
                                          <small style="color: white;">OFF</small>
                                      </div>
                                  </div>
                                  <div class="coupon-details">
                                      <div class="coupon-header">
                                          <div class="coupon-title">
                                              <div class="code-container">
                                                  <h4 class="coupon-code">${coupon.code}</h4>
                                                  <button onclick="event.stopPropagation(); copyAndApplyCode('${coupon.code}')" class="copy-code-btn" title="Copy Code">
                                                      <i class="fas fa-copy"></i>
                                                  </button>
                                              </div>
                                              <span class="validity">Valid till ${new Date(coupon.expiry).toLocaleDateString()}</span>
                                          </div>
                                          <div class="savings-badge">
                                              Save ${coupon.savings}
                                          </div>
                                      </div>
                                      <p class="coupon-description">${coupon.description}</p>
                                      <div class="coupon-footer">
                                          <span class="uses-left">Uses left: ${coupon.usesLeft}</span>
                                      </div>
                                  </div>
                              </div>
                          `).join('')}
                      </div>`;
              } else {
                  content = `
                      <div class="no-coupons-message">
                          <div class="no-coupons-icon">
                              <i class="fas fa-ticket-alt"></i>
                          </div>
                          <h3>No Coupons Available</h3>
                          <p>Sorry, there are no active coupons available for your cart value at this moment.</p>
                      </div>`;
              }

              await Swal.fire({
                  title: '<div class="coupon-popup-header"><i class="fas fa-ticket-alt"></i> Available Offers</div>',
                  html: content,
                  showCloseButton: true,
                  showConfirmButton: false,
                  width: '600px',
                  customClass: {
                      popup: 'modern-coupon-popup',
                      closeButton: 'modern-close-button'
                  }
              });
          } catch (error) {
              console.error('Error:', error);
              Swal.fire({
                  icon: 'error',
                  title: 'Oops...',
                  text: 'Failed to fetch coupons. Please try again.'
              });
          }
      };

      window.copyCode = function(code) {
          // ...existing copyCode function...
      };

      window.applyCoupon = async function(code) {
          // ...existing applyCoupon function...
      };

      // Existing event listeners and other functions
      document.addEventListener('DOMContentLoaded', function() {
          // ...existing DOM ready code...
      });

      async function copyAndApplyCode(code) {
        try {
            // Set the code in input field
            document.getElementById('couponCode').value = code;

            // Close the coupon modal
            Swal.close();

            // Immediately apply the coupon
            await applyCoupon(code);

        } catch (err) {
            console.error('Failed to copy and apply code:', err);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to apply coupon. Please try again.',
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 2000
            });
        }
    }

    async function showAvailableCoupons() {
        try {
            const totalAmount = <%= cart.items.filter(item => item.quantity > 0).reduce((acc, item) => acc + item.totalPrice, 0) %>;
            const response = await fetch(`/api/available-coupons?total=${totalAmount}`);
            const data = await response.json();

            let content;
            if (data.status === "success" && data.coupons && data.coupons.length > 0) {
                content = `
                    <div class="modern-coupon-container">
                        ${data.coupons.map(coupon => `
                            <div class="modern-coupon-item">
                                <div class="coupon-left-part">
                                    <div class="discount-circle">
                                        <div class="discount-amount">${coupon.savings}</div>
                                        <small style="color: white;">OFF</small>
                                    </div>
                                </div>
                                <div class="coupon-details">
                                    <div class="coupon-header">
                                        <div class="coupon-title">
                                            <div class="code-container">
                                                <h4 class="coupon-code">${coupon.code}</h4>
                                                <button onclick="event.stopPropagation(); copyAndApplyCode('${coupon.code}')" class="copy-code-btn" title="Apply Code">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                            </div>
                                            <span class="validity">Valid till ${new Date(coupon.expiry).toLocaleDateString()}</span>
                                        </div>
                                        <div class="savings-badge">Save ${coupon.savings}</div>
                                    </div>
                                    <p class="coupon-description">${coupon.description}</p>
                                    <div class="coupon-footer">
                                        <span class="uses-left">Uses left: ${coupon.usesLeft}</span>
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>`;
            } else {
                // ...existing no coupons message...
            }

            // ...existing Swal.fire code...
        } catch (error) {
            // ...existing error handling...
        }
    }

    async function applyCoupon(code) {
      try {
        // Disable coupon input and button while processing
        const couponInput = document.getElementById('couponCode');
        const applyButton = document.querySelector('.apply-coupon');
        couponInput.disabled = true;
        applyButton.disabled = true;

        if (!code) {
          code = couponInput.value;
        }

        if (!code) {
          Swal.fire({
            icon: 'warning',
            title: 'Please enter a coupon code',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000
          });
          return;
        }

        const totalAmount = <%= cart.items.filter(item => item.quantity > 0).reduce((acc, item) => acc + item.totalPrice, 0) %>;

        // Check if a coupon is already applied
        const existingDiscount = document.querySelector('.price-row.discount');
        if (existingDiscount) {
          Swal.fire({
            icon: 'warning',
            title: 'A coupon is already applied',
            text: 'Please remove the current coupon before applying a new one',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000
          });
          return;
        }

        const response = await fetch('/api/validate-coupon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            code: code,
            cartTotal: totalAmount
          })
        });

        const data = await response.json();

        if (data.status === 'success') {
          // Calculate new total
          const newTotal = totalAmount - data.discount;

          // Update all total amount displays
          document.querySelectorAll('.total-amount').forEach(el => {
            el.textContent = `₹${newTotal}`;
          });

          // Add discount row to price breakdown
          const priceBreakdown = document.querySelector('.price-breakdown');
          const discountRow = document.createElement('div');
          discountRow.className = 'price-row discount';
          discountRow.innerHTML = `
            <span>Discount (${code}) <button onclick="removeCoupon()" class="remove-coupon"><i class="fas fa-times"></i></button></span>
            <span class="discount-amount" style="color: #28a745">-₹${data.discount}</span>
          `;

          // Insert discount row before total
          const totalRow = priceBreakdown.querySelector('.price-row.total');
          priceBreakdown.insertBefore(discountRow, totalRow);

          // Add coupon data to a hidden input for form submission
          const hiddenCouponInput = document.createElement('input');
          hiddenCouponInput.type = 'hidden';
          hiddenCouponInput.name = 'appliedCoupon';
          hiddenCouponInput.value = code;
          document.getElementById('checkoutForm').appendChild(hiddenCouponInput);

          // Show success message
          Swal.fire({
            icon: 'success',
            title: 'Coupon Applied!',
            text: `Saved ₹${data.discount} on your order`,
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000
          });

          // Close the coupon modal if it's open
          if (Swal.isVisible()) {
            Swal.close();
          }

          // Clear and disable the coupon input
          couponInput.value = '';
          couponInput.disabled = true;
          applyButton.disabled = true;
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: data.message,
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Failed to apply coupon. Please try again.',
          toast: true,
          position: 'top-end',
          showConfirmButton: false,
          timer: 3000
        });
      } finally {
        // Re-enable coupon input and button
        document.getElementById('couponCode').disabled = false;
        document.querySelector('.apply-coupon').disabled = false;
      }
    }

    function removeCoupon() {
      // Remove the discount row
      const discountRow = document.querySelector('.price-row.discount');
      if (discountRow) {
        const discountAmount = parseInt(discountRow.querySelector('.discount-amount').textContent.replace(/[^0-9]/g, ''));
        discountRow.remove();

        // Remove hidden coupon input
        const hiddenCouponInput = document.querySelector('input[name="appliedCoupon"]');
        if (hiddenCouponInput) {
          hiddenCouponInput.remove();
        }

        // Restore original total
        const currentTotal = parseInt(document.querySelector('.total-amount').textContent.replace(/[^0-9]/g, ''));
        const originalTotal = currentTotal + discountAmount;
        document.querySelectorAll('.total-amount').forEach(el => {
          el.textContent = `₹${originalTotal}`;
        });

        // Enable coupon input and button
        document.getElementById('couponCode').disabled = false;
        document.querySelector('.apply-coupon').disabled = false;

        Swal.fire({
          icon: 'success',
          title: 'Coupon Removed',
          toast: true,
          position: 'top-end',
          showConfirmButton: false,
          timer: 2000
        });
      }
    }

    async function handleApplyCoupon() {
    const couponInput = document.getElementById('couponCode');
    const code = couponInput.value.trim();

    // Check if a coupon is already applied
    const existingDiscount = document.querySelector('.price-row.discount');
    if (existingDiscount) {
      Swal.fire({
        icon: 'warning',
        title: 'A coupon is already applied',
        text: 'Please remove the current coupon before applying a new one',
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000
      });
      return;
    }

    if (!code) {
      Swal.fire({
        icon: 'warning',
        title: 'Please enter a coupon code',
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000
      });
      return;
    }

    try {
      const applyButton = document.querySelector('.apply-coupon');
      applyButton.disabled = true;
      couponInput.disabled = true;

      const totalAmount = <%= cart.items.filter(item => item.quantity > 0).reduce((acc, item) => acc + item.totalPrice, 0) %>;

      const response = await fetch('/api/validate-coupon', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          code: code,
          cartTotal: totalAmount
        })
      });

      const data = await response.json();

      if (data.status === 'success') {
        const newTotal = totalAmount - data.discount;

        // Update all total amount displays
        document.querySelectorAll('.total-amount').forEach(el => {
          el.textContent = `₹${newTotal}`;
        });

        // Add discount row to price breakdown
        const priceBreakdown = document.querySelector('.price-breakdown');
        const discountRow = document.createElement('div');
        discountRow.className = 'price-row discount';
        discountRow.innerHTML = `
          <span>Discount (${code}) <button onclick="removeCoupon()" class="remove-coupon"><i class="fas fa-times"></i></button></span>
          <span class="discount-amount" style="color: #28a745">-₹${data.discount}</span>
        `;

        // Insert discount row before total
        const totalRow = priceBreakdown.querySelector('.price-row.total');
        priceBreakdown.insertBefore(discountRow, totalRow);

        // Add hidden input for form submission
        const hiddenCouponInput = document.createElement('input');
        hiddenCouponInput.type = 'hidden';
        hiddenCouponInput.name = 'appliedCoupon';
        hiddenCouponInput.value = code;
        document.getElementById('checkoutForm').appendChild(hiddenCouponInput);

        // Show success message
        Swal.fire({
          icon: 'success',
          title: 'Coupon Applied!',
          text: `Saved ₹${data.discount} on your order`,
          toast: true,
          position: 'top-end',
          showConfirmButton: false,
          timer: 3000
        });

        // Clear input
        couponInput.value = '';
      } else {
        // Re-enable input and button
        applyButton.disabled = false;
        couponInput.disabled = false;

        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: data.message,
          toast: true,
          position: 'top-end',
          showConfirmButton: false,
          timer: 3000
        });
      }
    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Failed to apply coupon. Please try again.',
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000
      });
    }
  }

  // ... rest of existing code ...
</script>

<%- include('../../views/layout/footer.ejs') %>
